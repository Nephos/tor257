#!/usr/bin/env ruby
# coding: utf-8

require 'optparse'

module Argument

  @@opt = nil
  def self.parse
    @@opt ||= OptionParser.new do |opts|
      opts.banner = "Usage: tor257 -p=keyphrase | -f=keyfile [-b=fd] [-v]"

      opts.on("--verbose", "More verbose") do
        $verbose = true
      end

      opts.on("--debug", "Developper mode (on STDERR)") do
        $debug = true
      end

      opts.on("--passphrase=pass", "Key (Passphrase)") do |key|
        $key = key
      end

      opts.on("--file=keyfile", "Key (File)") do |key|
        raise "File #{key} does'nt exists !" unless File.exists? key
        $key = File.read(key)
        raise "File #{key} is empty !" if $key.empty?
      end

      opts.on("--base64=fd", "Output in ASCII Base64") do |fd|
        $fi64 ||= (fd == "in")
        $fo64 ||= (fd == "out")
        require 'base64'
      end

    end.parse!

    raise ArgumentError, "Key is required" unless $key
    return @@opt

  end

end

begin
  Argument.parse

  if $debug # to load local env
    load Dir.pwd + '/lib/tor257.rb'
  else
    require 'tor257'
  end

  include Tor257

  trap("SIGINT") do
    exit 0
  end

  key = Key.new($key)
  i = 0
  loop do
    str = STDIN.read 4096
    if str.nil?
      exit 0
    end
    str = $fi64 ? Base64.decode64(str) : str
    STDERR.puts "Bloc ##{i} [#{str}] with [#{key}]" if $verbose
    # STDERR.puts "\"#{str}\""
    m = Message.new str
    out = m.encrypt(key)
    STDOUT.write $fo64 ? Base64.encode64(out) : out
    i += 1
  end
rescue => err
  STDERR.puts "Error: #{err.message}"
  STDERR.puts err.backtrace.join("\n") if $verbose
end
